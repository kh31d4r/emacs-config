#+TITLE: Emacs configuration
#+AUTHOR: Daniel Persson

#+STARTUP: overview

* Global
** Display
   Don't show the startup screen.
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables '(inhibit-startup-screen t))
   #+END_SRC

   Use =dracula-theme= which looks very nice in graphical mode, and
   looks okay in most terminals.
   #+BEGIN_SRC emacs-lisp
     (use-package dracula-theme
       :ensure t
       :config (enable-theme 'dracula))
   #+END_SRC

   Start the first emacs frame maximized.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'initial-frame-alist '(fullscreen . maximized))
   #+END_SRC

   Hide menus and scrollbars.
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode 0)
     (scroll-bar-mode 0)
     (tool-bar-mode 0)
   #+END_SRC
*** Interface
    Use =powerline= and =smart-mode-line= to make the modeline look nicer.
    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :ensure t
        :config (powerline-default-theme))
      (use-package smart-mode-line
        :ensure t
        :config
        (setq sml/no-confirm-load-theme t)
        (sml/setup))
    #+END_SRC

    Display current time in the modeline.
    #+BEGIN_SRC emacs-lisp
      (display-time-mode 1)
    #+END_SRC

    Display current column in the modeline.
    #+BEGIN_SRC emacs-lisp
      (column-number-mode 1)
    #+END_SRC

    Toggle showing line numbers with =C-c l=, and separate the line
    numbers from the buffer with a space.
    #+BEGIN_SRC emacs-lisp
      (use-package nlinum
        :ensure t
        :config
        (setq nlinum-format "%d ")
        (global-set-key (kbd "C-c l") 'nlinum-mode))
    #+END_SRC

    Show possible next key combinations.
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :diminish which-key-mode
        :config (which-key-mode))
    #+END_SRC
*** Text
    Increase the default font size in graphical mode.
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 150)
    #+END_SRC

    Replace lambdas with fancy symbols.
    #+BEGIN_SRC emacs-lisp
      (global-prettify-symbols-mode t)
    #+END_SRC

    Ensure syntax highlighting is always enabled and turned up to max.
    #+BEGIN_SRC emacs-lisp
      (global-font-lock-mode t)
      (setq font-lock-maximum-decoration t)
    #+END_SRC

    Highlight matching parenthesis.
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC

    Highlight tabs and trailing whitespace.
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-chars
        :ensure t
        :config
        (add-hook 'font-lock-mode-hook 'hc-highlight-tabs)
        (add-hook 'font-lock-mode-hook 'hc-highlight-trailing-whitespace))
    #+END_SRC
** Editing
   Indent with 4 spaces instead of tabs.
   #+BEGIN_SRC emacs-lisp
     (setq indent-tabs-mode nil)
     (setq-default indent-tabs-mode nil)
     (setq default-tab-width 4)
   #+END_SRC

   Don't move point when pasting with middle mouse button.
   #+BEGIN_SRC emacs-lisp
     (setq mouse-yank-at-point t)
   #+END_SRC

   Try to use clipboard data from other programs when possible.
   #+BEGIN_SRC emacs-lisp
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC

   Enable auto completion with =company=.
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :diminish "com"
       :config (global-company-mode)
       :bind ("M-a" . company-complete))
   #+END_SRC

   Enable snippets for all modes.
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config (yas-global-mode 1))
   #+END_SRC

   Enable =expand-region=.
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("M-e" . er/expand-region))
   #+END_SRC

   Enable =multiple-cursors=.
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind ("M-n" . mc/mark-next-like-this-word))
   #+END_SRC

   Don't disable upper and lowercase region.
   #+BEGIN_SRC emacs-lisp
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
   #+END_SRC

   Bind =C-c i= to spellcheck.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c i") 'ispell-word)
   #+END_SRC

   Bind =C-c C-c= to =cleanup-tabs-whitespace=, that removes trailing
   whitespace and change tabs to spaces.
   #+BEGIN_SRC emacs-lisp
     (defun cleanup-tabs-whitespace ()
       (interactive)
       (whitespace-cleanup)
       (untabify (point-min) (point-max))
       (indent-region (point-min) (point-max) nil))

     (global-set-key (kbd "C-c C-c") 'cleanup-tabs-whitespace)
   #+END_SRC

   Reload the current buffer from disk with =C-v=. Only prompt for
   confimation if the buffer was modified.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-v") (lambda ()
                                   (interactive)
                                   (revert-buffer t (not (buffer-modified-p)) t)))
   #+END_SRC

   Bind =C-x e= to =eval-and-replace=, which evaluates the current
   S-expression and replaces it with the output.
   #+BEGIN_SRC emacs-lisp
     (defun eval-and-replace ()
       (interactive)
       (backward-kill-sexp)
       (condition-case nil
           (prin1 (eval (read (current-kill 0)))
                  (current-buffer))
         (error (message "Invalid expression")
                (insert (current-kill 0)))))
      (global-set-key (kbd "C-x e") 'eval-and-replace)
   #+END_SRC
*** Number manipulation
    Bind =M-+= and =M--= to incrementing or decrementing the number at point.
    #+BEGIN_SRC emacs-lisp
      (defun manipulate-number-at-point (manipulation-func)
        (interactive)
        (skip-chars-backward "0-9")
        (or (looking-at "[0-9]+")
            (error "No number at point"))
        (replace-match (number-to-string
                        (funcall manipulation-func (string-to-number (match-string 0))))))

      (global-set-key (kbd "M-+") (lambda ()
                                    (interactive)
                                    (manipulate-number-at-point #'1+)))
      (global-set-key (kbd "M--") (lambda ()
                                    (interactive)
                                    (manipulate-number-at-point #'1-)))
    #+END_SRC
** Navigation
   Treat CamelCase as different words by enabling =subword-mode=
   everywhere, and silence the comma on the modeline.
   #+begin_SRC emacs-lisp
     (global-subword-mode 1)
     (let ((entry (assq 'subword-mode minor-mode-alist)))
       (when entry (setcdr entry '(nil))))
   #+END_SRC

   Bind =C-c <left>= and =C-C <right>= to undoing and redoing changes
   to the window layout.
   #+BEGIN_SRC emacs-lisp
     (use-package winner
       :ensure t
       :config (winner-mode 1))
   #+END_SRC

   Enable fast jumping between windows when using more than 2 windows.
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :bind ("C-x o" . ace-window))
   #+END_SRC

   Enable fast and exact jumping across the screen by binding =M-s= to =ace-jump-mode=.
   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-mode
       :ensure t
       :bind ("M-s" . ace-jump-mode))
   #+END_SRC
** System
   Use =helm= for emacs commands that involves filtering and selecting
   from a list. Also enable tab completion when filtering, to make
   traversing through directories easier.
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :bind (("C-x C-f" . helm-find-files)
              ("C-x b" . helm-buffers-list)
              ("M-x" . helm-M-x)
              ("M-y" . helm-show-kill-ring)
              ("C-x r b" . helm-bookmarks))
       :config (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action))
   #+END_SRC

   Use =projectile= to manage projects, with =projectile-helm= as
   interface.
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :bind ("C-c C-j" . projectile-compile-project))

     (use-package helm-projectile
       :ensure t
       :config
       (global-set-key (kbd "C-x f") (lambda ()
                                         (interactive)
                                         (if (projectile-project-p)
                                             (helm-projectile-find-file)
                                           (helm-for-files))))
       (global-set-key (kbd "C-x C-b") (lambda ()
                                         (interactive)
                                         (if (projectile-project-p)
                                             (helm-projectile-switch-to-buffer)
                                           (helm-buffers-list)))))
   #+END_SRC

   Change "yes or no" to "y or n".
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Don't ask for command when running compile.
   #+BEGIN_SRC emacs-lisp
     (setq compilation-read-command nil)
   #+END_SRC

   Don't ask before opening large files.
   #+BEGIN_SRC emacs-lisp
     (setq large-file-warning-threshold 200000000)
   #+END_SRC

   Add newlines at the end of files that don't have them.
   #+BEGIN_SRC emacs-lisp
     (setq require-final-newline t)
   #+END_SRC

   Don't save backups in current working directory.
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC

   Use version numbers for the backups.
   #+BEGIN_SRC emacs-lisp
     (setq version-control t)
   #+END_SRC

   Don't ask when removing old backups.
   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t)
   #+END_SRC

   Don't save autosaves in current working directory.
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t)))
   #+END_SRC

   Weeks start on monday.
   #+BEGIN_SRC emacs-lisp
     (setq calendar-week-start-day 1)
   #+END_SRC

   Use =UTF-8= everywhere.
   #+BEGIN_SRC emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC
** Version Control
   Use =magit= as git interface.
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind (("C-c g" . magit-status)))
   #+END_SRC

   Use =git-commit-mode= for writing commit messages in git.
   #+BEGIN_SRC emacs-lisp
     (global-git-commit-mode 1)
   #+END_SRC

   Use =git-messenger= for fast inline blame.
   #+BEGIN_SRC emacs-lisp
     (use-package git-messenger
       :ensure t
       :bind ("C-c b" . git-messenger:popup-message))
   #+END_SRC
* Python
  Use =jedi= as autocompletion engine for company, and bind hotkeys
  for goto definition and show documentation.

  Needs virtenv installed on the system to work.
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :config (add-hook 'python-mode-hook 'jedi:setup)
      :bind
      ("C-c j d" . jedi:goto-definition)
      ("C-c j p" . jedi:goto-definition-pop-marker)
      ("C-c j h" . jedi:show-doc))

    (use-package company-jedi
      :ensure t
      :config
      (add-hook 'python-mode-hook (lambda ()
                                    (add-to-list 'company-backends 'company-jedi))))
  #+END_SRC

  Use =flycheck= for syntax and style checking. Needs pylint
  installed on the system to work.
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :config
      (add-hook 'python-mode-hook (lambda ()
                                    (flycheck-mode 1)
                                    (semantic-mode 1)
                                    (setq flycheck-checker 'python-pylint
                                          flycheck-checker-error-threshold 900))))
  #+END_SRC
* C
  Don't use GNU style indendataion.
  #+BEGIN_SRC emacs-lisp
    (setq c-default-style "bsd"
          c-basic-offset 4)
  #+END_SRC
* Java
  Define maven commands for projectile.
  #+BEGIN_SRC emacs-lisp
    (projectile-register-project-type 'maven '("pom.xml")
                                      :compile "mvn clean install"
                                      :test "mvn clean test"
                                      :test-suffix "Test.java")

  #+END_SRC
* Web
  Use web mode for =html= and =css=, and make closing tags feel more
  like =nxml-mode=.
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :mode
      (("\\.html\\'" . web-mode)
       ("\\.css\\'" . web-mode))
      :config
      (add-hook 'web-mode-hook
                (lambda ()
                  (local-set-key
                   (kbd "C-c C-f")
                   (lambda ()
                     (interactive)
                     (web-mode-element-close)
                     (indent-for-tab-command)))))
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-auto-closing t))
   #+END_SRC

  Enable emmet mode when in =web-mode= to quickly create elements.
  #+BEGIN_SRC emacs-lisp
    (use-package emmet-mode
      :ensure t
      :config (add-hook 'web-mode-hook 'emmet-mode))
  #+END_SRC

  Start =httpd= when in =web-mode= on port 8085, and enable
  =impatient-mode=. Point browser to =http://localhost:8085/imp= to
  see the preview.
  #+BEGIN_SRC emacs-lisp
    (use-package impatient-mode
      :ensure t
      :config
      (add-hook 'impatient-mode-hook (lambda ()
                                       (setq httpd-port 8085)
                                       (httpd-start)))
      (add-hook 'web-mode-hook 'impatient-mode))
  #+END_SRC

  Enable utility functions for quickly looking things up in the HTTP
  protocol.
  #+BEGIN_SRC emacs-lisp
    (use-package know-your-http-well
      :ensure t)
  #+END_SRC
* XML
  Set indentation size to 4.
  #+BEGIN_SRC emacs-lisp
    (setq nxml-child-indent 4)
  #+END_SRC
* Markdown
  Use =markdown-mode= for editing markdown files.
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :config (setq markdown-command "markdown"))
  #+END_SRC
* Yaml
  Use =yaml-mode= for editing yaml files.
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t)
  #+END_SRC

  Use =flycheck= for syntax and style checking.
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-yamllint
      :ensure t
      :config (add-hook 'yaml-mode-hook (lambda ()
                                          (flycheck-yamllint-setup)
                                          (flycheck-mode))))

  #+END_SRC
* Docker
  Enable syntax highlighting when writing Dockerfiles.
  #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
      :ensure t)
  #+END_SRC

  When in programming modes, activate docker minor mode for
  controlling docker containers.
  #+BEGIN_SRC emacs-lisp
    (use-package docker
      :ensure t
      :diminish docker-mode
      :config
      (add-hook 'prog-mode-hook (lambda ()
                                  (docker-global-mode))))
  #+END_SRC
* Lisp
  Use paredit for editing elisp.
  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t
      :diminish "par"
      :config (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))
  #+END_SRC

  Turn on =eldoc= to get fast access to function signatures.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  #+END_SRC

  Show parentheses in different colors to easier pair them together.
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'emacs-lisp-mode-hook (lambda ()
                                        (rainbow-delimiters-mode))))
  #+END_SRC
* Org mode
  Keep agenda files in =~/org/=.
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/org"))
  #+END_SRC

  Define custom list of default TODO states:
  - =TODO= Task that is not yet started.
  - =ONGOING= Task that is currently being worked on.
  - =WAITING= Task that cannot be worked on since it is waiting for
    someone else to do something.
  - =ON HOLD= Task that has been started but is not being actively
    worked on.
  - =DONE=
    Completed task.
  - =CANCELLED= Task that will not be worked on.
  #+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
      '((sequence "TODO(t)" "ONGOING(o)" "WAITING(w)" "ON HOLD(h)" "|" "DONE(d)" "CANCELLED(c)")))
  #+END_SRC

  Define global list of tags.
  #+BEGIN_SRC emacs-lisp
    (setq org-tag-persistent-alist
          '(("bug" . ?b)
            ("project" . ?p)))
  #+END_SRC

  Define custom capture templates.
  #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          '(("l" "life")
            ("lt" "Todo" entry (file "~/org/life.org")
             (file "~/.emacs.d/capture-templates/todo"))
            ("lc" "Todo with checklist" entry (file "~/org/life.org")
             (file "~/.emacs.d/capture-templates/todo-checklist"))
            ("lo" "Org-mode Todo" entry (file+headline "~/org/life.org" "Org-mode things")
             (file "~/.emacs.d/capture-templates/life/todo-org"))
            ("lb" "Book" entry (file+headline "~/org/life.org" "Books")
             (file "~/.emacs.d/capture-templates/life/books"))
            ("lw" "Wishlist Item" entry (file+headline "~/org/life.org" "Wishlist")
             (file "~/.emacs.d/capture-templates/life/wishlist-item"))
            ("w" "work")
            ("wt" "Todo" entry (file "~/org/work.org")
             (file "~/.emacs.d/capture-templates/todo"))
            ("wc" "Todo with checklist" entry (file "~/org/work.org")
             (file "~/.emacs.d/capture-templates/todo-checklist"))))
  #+END_SRC
** Display
   Show nice bullets when not using terminal emacs.
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (use-package org-bullets
         :ensure t
         :config
         (add-hook 'org-mode-hook (lambda ()
                                    (org-bullets-mode)))))
   #+END_SRC

   Align tags to 90 characters to allow longer headings.
   #+BEGIN_SRC emacs-lisp
     (setq org-tags-column 90)
   #+END_SRC

   Customize state colors.
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keyword-faces
           '(("TODO" . (:foreground "light coral" :weight bold))
             ("WAITING" . (:foreground "red" :weight bold))
             ("ONGOING" . (:foreground "deep sky blue" :weight bold))
             ("ON HOLD" . (:foreground "red" :weight bold))
             ("DONE" . (:foreground "spring green" :weight bold))
             ("CANCELLED" . (:foreground "dim gray" :weight bold))))
   #+END_SRC
** Code blocks
   Show syntax highlighting in code blocks.
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

   Make tab indent work in code blocks.
   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

   Always allow running lisp blocks.
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)))
   #+END_SRC
** Keybindings
   Bind  =C-c a= to =org-agenda= globally, so the agenda can be pulled up from
   anywhere.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c a") 'org-agenda)
   #+END_SRC

   Bind =C-c c= to =org-capture= globally, since we are probably not doing org
   related things when thinking up new stuff...
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC

   Make =C-a= and =C-e= ignore leading stars and trailing
   tags. Hitting the key again will get the old behavior.
   #+BEGIN_SRC emacs-lisp
     (setq org-special-ctrl-a/e 'first)
   #+END_SRC
** Notes
   Log notes in the =NOTES= drawer.
   #+BEGIN_SRC emacs-lisp
     (setq org-log-into-drawer "NOTES")
   #+END_SRC

   Log rescheduled tasks in the drawer too. Moving a deadline
   requires a note, moving a scheduled task only logs the time.
   #+BEGIN_SRC emacs-lisp
     (setq org-log-reschedule "time")
     (setq org-log-redeadline "note")
   #+END_SRC

   Ask for note when closing TODO's.
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'note)
   #+END_SRC
** Export
   Add more export engines:
   - Twitter bootstrap
     #+BEGIN_SRC emacs-lisp
       (use-package ox-twbs
         :ensure t)
     #+END_SRC
   - MediaWiki
     #+BEGIN_SRC emacs-lisp
       (use-package ox-mediawiki
         :ensure t)
     #+END_SRC
   - IOslide
     #+BEGIN_SRC emacs-lisp
       (use-package ox-ioslide
         :ensure t)
     #+END_SRC
