#+STARTUP: overview

* Global
** Keybindings
*** Expand region
    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :ensure t
        :bind ("M-e" . er/expand-region))
    #+END_SRC
*** Enable upper and lowercase region
    #+BEGIN_SRC emacs-lisp
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC
*** Change "yes or no" to "y or n"
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Tab and whitespace cleanup
    #+BEGIN_SRC emacs-lisp
      (defun cleanup-tabs-whitespace ()
        "Remove trailing whitespace and change tabs to spaces"
        (interactive)
        (whitespace-cleanup)
        (untabify (point-min) (point-max))
        (indent-region (point-min) (point-max) nil))

      (global-set-key (kbd "C-c C-c") 'cleanup-tabs-whitespace)
    #+END_SRC
*** Increment Number
    #+BEGIN_SRC emacs-lisp
      (defun increment-number-at-point ()
        (interactive)
        (skip-chars-backward "0-9")
        (or (looking-at "[0-9]+")
            (error "No number at point"))
        (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
      (global-set-key (kbd "M-+") 'increment-number-at-point)
    #+END_SRC
*** Bind compare windows
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c w") 'compare-windows)
    #+END_SRC
*** Show possible keys
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :config
        (which-key-mode))
    #+END_SRC
*** Helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :bind (("C-x b" . helm-buffers-list)
               ("C-x C-f" . helm-find-files)
               ("M-x" . helm-M-x)
               ("M-y" . helm-show-kill-ring)
               ("C-x r b" . helm-bookmarks)))
    #+END_SRC
** Navigation
*** Windows
    Enable undoing window changes.
    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :ensure t
        :config
        (winner-mode 1))
    #+END_SRC
    Enable easier jumping between windows
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
        :ensure t
        :bind
        ("C-x o" . ace-window))
    #+END_SRC
*** Easier jumping
    #+BEGIN_SRC emacs-lisp
      (use-package ace-jump-mode
        :ensure t
        :bind ("M-s" . ace-jump-mode))
    #+END_SRC
** Display and formatting
*** Increase font size
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 150)
    #+END_SRC
*** Don't show startup screen
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(inhibit-startup-screen t))
    #+END_SRC
*** Don't show menus and scrollbars
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode 0)
      (scroll-bar-mode 0)
      (tool-bar-mode 0)
    #+END_SRC
*** Show columns
    #+BEGIN_SRC emacs-lisp
      (column-number-mode 1)
    #+END_SRC
*** Line numbers
    Show line numbers with space between the numbers and the buffer
    #+BEGIN_SRC emacs-lisp
      (use-package nlinum
        :ensure t
        :config
        (global-nlinum-mode)
        (setq nlinum-format "%d "))
    #+END_SRC
    Toggle line numbers with ~C-c l~
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c l") 'nlinum-mode)
    #+END_SRC
*** Syntax Highlighting
    #+BEGIN_SRC emacs-lisp
      (custom-set-faces)
    #+END_SRC
*** Highlight tabs and trailing whitespace
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-chars
        :ensure t
        :config
        (add-hook 'font-lock-mode-hook 'hc-highlight-tabs)
        (add-hook 'font-lock-mode-hook 'hc-highlight-trailing-whitespace))
    #+END_SRC
*** Don't use tabs
    #+BEGIN_SRC emacs-lisp
      (setq indent-tabs-mode nil)
      (setq-default indent-tabs-mode nil)
      (setq default-tab-width 4)
    #+END_SRC
** Version Control
*** Use magit as git inteface
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind (("C-c g" . magit-status)))
   #+END_SRC
*** Use git-messenger for fast blame
    #+BEGIN_SRC emacs-lisp
      (use-package git-messenger
        :ensure t
        :bind (("C-c b" . git-messenger:popup-message)))
    #+END_SRC
** Enable multiple cursors
   Useful for editing both opening and closing tag at the same time.
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind
       ("M-n" . mc/mark-next-like-this-word))
   #+END_SRC
** Files
*** Don't ask before opening large files
    #+BEGIN_SRC emacs-lisp
      (setq large-file-warning-threshold 200000000)
    #+END_SRC
*** Don't save backups in current working directory
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    #+END_SRC
* Python
** Jedi
   Autocompletion, goto definition and show documentation.
   Needs virtenv installed on the system to work.
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :config
       (add-hook 'python-mode-hook 'jedi:setup)
       :bind
       ("C-c j d" . jedi:goto-definition)
       ("C-c j p" . jedi:goto-definition-pop-marker)
       ("C-c j h" . jedi:show-doc))
   #+END_SRC
** Syntax and style checking
   Needs pylint installed on the system to work.
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (add-hook 'python-mode-hook (lambda ()
                                     (flycheck-mode 1)
                                     (semantic-mode 1)
                                     (setq flycheck-checker 'python-pylint
                                           flycheck-checker-error-threshold 900))))
   #+END_SRC
* C
** Don't use GNU style indendataion
   #+BEGIN_SRC emacs-lisp
     (setq c-default-style "bsd"
           c-basic-offset 4)
   #+END_SRC
* Web
** Use web mode
   #+BEGIN_SRC emacs-lisp
     (defun close-and-indent ()
       "Close current tag and indent the line"
       (interactive)
       (web-mode-element-close)
       (indent-for-tab-command))

     (defun web-mode-keybindings ()
       "Override keys to use for web-mode"
       (local-set-key (kbd "C-c C-f") 'close-and-indent))

     (use-package web-mode
       :ensure t
       :mode
       (("\\.html\\'" . web-mode)
        ("\\.css\\'" . web-mode))
       :config
       (add-hook 'web-mode-hook 'web-mode-keybindings)
       (setq web-mode-enable-auto-quoting t)
       (setq web-mode-enable-auto-pairing t)
       (setq web-mode-enable-auto-closing t))
   #+END_SRC
* XML
** Set indentation size to 4
   #+BEGIN_SRC emacs-lisp
     (setq nxml-child-indent 4)
   #+END_SRC
* Org mode
** Ask for note when closing TODO's
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'note)
   #+END_SRC
