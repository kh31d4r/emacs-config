#+TITLE: Emacs configuration
#+STARTUP: overview

* Global
** Localization
   Weeks start on monday
   #+BEGIN_SRC emacs-lisp
     (setq calendar-week-start-day 1)
   #+END_SRC
** Keybindings
*** Expand region
    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :ensure t
        :bind ("M-e" . er/expand-region))
    #+END_SRC
*** Enable upper and lowercase region
    #+BEGIN_SRC emacs-lisp
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC
*** Change "yes or no" to "y or n"
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Tab and whitespace cleanup
    #+BEGIN_SRC emacs-lisp
      (defun cleanup-tabs-whitespace ()
        "Remove trailing whitespace and change tabs to spaces"
        (interactive)
        (whitespace-cleanup)
        (untabify (point-min) (point-max))
        (indent-region (point-min) (point-max) nil))

      (global-set-key (kbd "C-c C-c") 'cleanup-tabs-whitespace)
    #+END_SRC
*** Increment Number
    #+BEGIN_SRC emacs-lisp
      (defun increment-number-at-point ()
        (interactive)
        (skip-chars-backward "0-9")
        (or (looking-at "[0-9]+")
            (error "No number at point"))
        (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
      (global-set-key (kbd "M-+") 'increment-number-at-point)
    #+END_SRC
*** Reload buffer
    Reload the current buffer from disk, and only prompt if the file
    has changed.
    #+BEGIN_SRC emacs-lisp
      (defun revert-buffer-noprompt ()
          "Reload the current buffer, only prompt if the buffer is modified"
          (interactive)
          (revert-buffer t (not (buffer-modified-p)) t))
      (global-set-key (kbd "C-v") 'revert-buffer-noprompt)
    #+END_SRC
*** Bind compare windows
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c w") 'compare-windows)
    #+END_SRC
*** Show possible keys
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :config
        (which-key-mode))
    #+END_SRC
*** Helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :bind (("C-x b" . helm-buffers-list)
               ("C-x C-f" . helm-find-files)
               ("M-x" . helm-M-x)
               ("M-y" . helm-show-kill-ring)
               ("C-x r b" . helm-bookmarks))
        :config (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action))
    #+END_SRC
*** Eval and replace
    Convenience method to be able to write lisp expressions and
    replace them in the edited text.
    #+BEGIN_SRC emacs-lisp
      (defun eval-and-replace ()
        "Replace the preceding sexp with its value."
        (interactive)
        (backward-kill-sexp)
        (condition-case nil
            (prin1 (eval (read (current-kill 0)))
                   (current-buffer))
          (error (message "Invalid expression")
                 (insert (current-kill 0)))))

      (global-set-key (kbd "C-x e") 'eval-and-replace)
    #+END_SRC
** Auto completion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config (global-company-mode)
       :bind ("M-a" . company-complete))
   #+END_SRC
** Navigation
*** Treat CamelCase as different words
    #+BEGIN_SRC emacs-lisp
      (global-subword-mode 1)
    #+END_SRC
*** Windows
    Enable undoing window changes.
    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :ensure t
        :config
        (winner-mode 1))
    #+END_SRC
    Enable easier jumping between windows
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
        :ensure t
        :bind
        ("C-x o" . ace-window))
    #+END_SRC
*** Easier jumping
    #+BEGIN_SRC emacs-lisp
      (use-package ace-jump-mode
        :ensure t
        :bind ("M-s" . ace-jump-mode))
    #+END_SRC
** Display and formatting
*** Increase font size
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 150)
    #+END_SRC
*** Don't show startup screen
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(inhibit-startup-screen t))
    #+END_SRC
*** Don't show menus and scrollbars
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode 0)
      (scroll-bar-mode 0)
      (tool-bar-mode 0)
    #+END_SRC
*** Show columns
    #+BEGIN_SRC emacs-lisp
      (column-number-mode 1)
    #+END_SRC
*** Line numbers
    Show line numbers with space between the numbers and the buffer
    #+BEGIN_SRC emacs-lisp
      (use-package nlinum
        :ensure t
        :config
        (global-nlinum-mode)
        (setq nlinum-format "%d "))
    #+END_SRC
    Toggle line numbers with ~C-c l~
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c l") 'nlinum-mode)
    #+END_SRC
*** Fancy symbols
    #+BEGIN_SRC emacs-lisp
      (global-prettify-symbols-mode t)
    #+END_SRC
*** Syntax Highlighting
    #+BEGIN_SRC emacs-lisp
      (custom-set-faces)
    #+END_SRC
*** Highlight tabs and trailing whitespace
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-chars
        :ensure t
        :config
        (add-hook 'font-lock-mode-hook 'hc-highlight-tabs)
        (add-hook 'font-lock-mode-hook 'hc-highlight-trailing-whitespace))
    #+END_SRC
*** Show matching parenthesis
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC
*** Don't use tabs
    #+BEGIN_SRC emacs-lisp
      (setq indent-tabs-mode nil)
      (setq-default indent-tabs-mode nil)
      (setq default-tab-width 4)
    #+END_SRC
** Version Control
*** Use magit as git inteface
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind (("C-c g" . magit-status)))
   #+END_SRC
*** Use git-messenger for fast blame
    #+BEGIN_SRC emacs-lisp
      (use-package git-messenger
        :ensure t
        :bind (("C-c b" . git-messenger:popup-message)))
    #+END_SRC
** Enable multiple cursors
   Useful for editing both opening and closing tag at the same time.
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind
       ("M-n" . mc/mark-next-like-this-word))
   #+END_SRC
** Files
*** Don't ask before opening large files
    #+BEGIN_SRC emacs-lisp
      (setq large-file-warning-threshold 200000000)
    #+END_SRC
*** Don't save backups in current working directory
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    #+END_SRC
* Python
** Jedi
   Autocompletion engine for company, hotkeys for goto definition and
   show documentation.  Needs virtenv installed on the system to work.
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :config
       (add-hook 'python-mode-hook 'jedi:setup)
       :bind
       ("C-c j d" . jedi:goto-definition)
       ("C-c j p" . jedi:goto-definition-pop-marker)
       ("C-c j h" . jedi:show-doc))

     (use-package company-jedi
       :ensure t
       :config
       (add-hook 'python-mode-hook (lambda ()
                                     (add-to-list 'company-backends 'company-jedi))))
   #+END_SRC
** Syntax and style checking
   Needs pylint installed on the system to work.
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (add-hook 'python-mode-hook (lambda ()
                                     (flycheck-mode 1)
                                     (semantic-mode 1)
                                     (setq flycheck-checker 'python-pylint
                                           flycheck-checker-error-threshold 900))))
   #+END_SRC
** Snippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (add-hook 'python-mode-hook (lambda ()
                                     (setq yas-snippet-dir
                                           (expand-file-name "snippets/python" user-emacs-directory))
                                     (yas-minor-mode)
                                     (yas-reload-all))))
   #+END_SRC
* C
** Don't use GNU style indendataion
   #+BEGIN_SRC emacs-lisp
     (setq c-default-style "bsd"
           c-basic-offset 4)
   #+END_SRC
* Web
** Use web mode
   #+BEGIN_SRC emacs-lisp
     (defun close-and-indent ()
       "Close current tag and indent the line"
       (interactive)
       (web-mode-element-close)
       (indent-for-tab-command))

     (defun web-mode-keybindings ()
       "Override keys to use for web-mode"
       (local-set-key (kbd "C-c C-f") 'close-and-indent))

     (use-package web-mode
       :ensure t
       :mode
       (("\\.html\\'" . web-mode)
        ("\\.css\\'" . web-mode))
       :config
       (add-hook 'web-mode-hook 'web-mode-keybindings)
       (setq web-mode-enable-auto-quoting t)
       (setq web-mode-enable-auto-pairing t)
       (setq web-mode-enable-auto-closing t))
   #+END_SRC
* XML
** Set indentation size to 4
   #+BEGIN_SRC emacs-lisp
     (setq nxml-child-indent 4)
   #+END_SRC
* Docker
  Syntax highlighting when writing Dockerfiles.
  #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
      :ensure t)
  #+END_SRC
  When in programming modes, activate docker minor mode
  #+BEGIN_SRC emacs-lisp
    (use-package docker
      :ensure t
      :config
      (add-hook 'prog-mode-hook (lambda ()
                                  (docker-global-mode))))
  #+END_SRC
* Lisp
** Rainbow paranthesises
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'emacs-lisp-mode-hook (lambda ()
                                         (rainbow-delimiters-mode))))
   #+END_SRC
** Use paredit
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure t
       :config
       (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))
   #+END_SRC
* Org mode
** Display settings
   Show syntax highlighting in code snippets
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC
   Make tab indent work in code snippets
   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC
   Show nice bullets when not using terminal-emacs
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (use-package org-bullets
         :ensure t
         :config
         (add-hook 'org-mode-hook (lambda ()
                                    (org-bullets-mode)))))
   #+END_SRC
** Agenda files
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files (quote ("~/org")))
   #+END_SRC
** Keybindings
   Bind org-agenda globally, so the agenda can be pulled up from
   anywhere.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c a") 'org-agenda)
   #+END_SRC
   Bind org-capture globally, since we are probably not doing org
   related things when thinking up new stuff...
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC
   Make C-a and C-e ignore leading stars and trailing tags. Hitting
   the key again will get the old behavior.
   #+BEGIN_SRC emacs-lisp
     (setq org-special-ctrl-a/e 'first)
   #+END_SRC
** Tags
*** Define global list of tags
    #+BEGIN_SRC emacs-lisp
      (setq org-tag-persistent-alist
            '(("cleanup" . ?c)
              ("bug" . ?b)
              ("idea" . ?i)
              ("improvement" . ?m)
              ("feature" . ?f)
              ("project" . ?p)))
    #+END_SRC
*** Align tags to 90 characters to allow longer headings
    #+BEGIN_SRC emacs-lisp
      (setq org-tags-column 90)
    #+END_SRC
** TODOs
*** Customize TODO states
    Set up custom list of states
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO(t)" "ONGOING(o)" "WAITING(w)" "ON HOLD(h)" "|" "DONE(d)" "CANCELLED(c)")))
    #+END_SRC

    Customize state colors
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keyword-faces
            '(("TODO" . (:foreground "light coral" :weight bold))
              ("WAITING" . (:foreground "red" :weight bold))
              ("ONGOING" . (:foreground "deep sky blue" :weight bold))
              ("ON HOLD" . (:foreground "red" :weight bold))
              ("DONE" . (:foreground "spring green" :weight bold))
              ("CANCELLED" . (:foreground "dim gray" :weight bold))))
    #+END_SRC
*** Ask for note when closing TODO's
    #+BEGIN_SRC emacs-lisp
      (setq org-log-done 'note)
    #+END_SRC
** Notes
*** Logging
    Log notes in a drawer
    #+BEGIN_SRC emacs-lisp
      (setq org-log-into-drawer "NOTES")
    #+END_SRC
    Log rescheduled tasks in the drawer too. Moving a deadline
    requires a note, moving a scheduled task only logs the time.
    #+BEGIN_SRC emacs-lisp
      (setq org-log-reschedule "time")
      (setq org-log-redeadline "note")
    #+END_SRC
** Capture templates
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           '(("l" "life")
             ("lt" "Todo" entry (file "~/org/life.org")
              (file "~/.emacs.d/capture-templates/todo"))
             ("lc" "Todo with checklist" entry (file "~/org/life.org")
              (file "~/.emacs.d/capture-templates/todo-checklist"))
             ("lo" "Org-mode Todo" entry (file+headline "~/org/life.org" "Org-mode things")
              (file "~/.emacs.d/capture-templates/life/todo-org"))
             ("lb" "Book" entry (file+headline "~/org/life.org" "Books")
              (file "~/.emacs.d/capture-templates/life/books"))
             ("lw" "Wishlist Item" entry (file+headline "~/org/life.org" "Wishlist")
              (file "~/.emacs.d/capture-templates/life/wishlist-item"))
             ("w" "work")
             ("wt" "Todo" entry (file "~/org/work.org")
              (file "~/.emacs.d/capture-templates/todo"))
             ("wc" "Todo with checklist" entry (file "~/org/work.org")
              (file "~/.emacs.d/capture-templates/todo-checklist"))))
   #+END_SRC
** Export
*** Add more export engines
    Twitter bootstrap
    #+BEGIN_SRC emacs-lisp
      (use-package ox-twbs
        :ensure t)
    #+END_SRC
    MediaWiki
    #+BEGIN_SRC emacs-lisp
      (use-package ox-mediawiki
        :ensure t)
    #+END_SRC
    IOslide
    #+BEGIN_SRC emacs-lisp
      (use-package ox-ioslide
        :ensure t)
    #+END_SRC
